const UPPERCASE_CHAR_REGEX = /[A-Z]/;
const LOWERCASE_CHAR_REGEX = /[a-z]/;
const DIGIT_REGEX = /[0-9]/;
const SPECIAL_CHAR_REGEX = /[^a-zA-Z\d\s:]/;
const MINIMUM_CHARS = 6;

const PASSWORD_REQUIREMENTS = [
  {
    label: '6+ characters',
    test: (password) => (password.length >= 6)
  },
  {
    label: 'English uppercase characters (A - Z)',
    test: (password) => (password.match(UPPERCASE_CHAR_REGEX) !== null)
  },
  {
    label: 'English lowercase characters (a - z)',
    test: (password) => (password.match(LOWERCASE_CHAR_REGEX) !== null)
  },
  {
    label: 'Base 10 digits (0 - 9)',
    test: (password) => (password.match(DIGIT_REGEX) !== null)
  },
  {
    label: 'Non-alphanumeric (For example: !, $, #, or %)',
    test: (password) => (password.match(SPECIAL_CHAR_REGEX) !== null)
  }
];

export const Password = {
  getStrength: function (password) {
    const requirementsPassed = PASSWORD_REQUIREMENTS.map((requirement) => {
      return requirement.test(password);
    }).reduce((strength, testPassed) => {
      return strength + (testPassed ? 1 : 0);
    }, 0);

    return (requirementsPassed / PASSWORD_REQUIREMENTS.length) * 100;
  },
  countRequirementsMet: function (password) {
    return this.getStrength(password) * PASSWORD_REQUIREMENTS.length / 100;
  },
  getRequirementsUnmet: function (password) {
    return PASSWORD_REQUIREMENTS.filter((requirement) => {
      return !requirement.test(password);
    });
  },
  getRequirementsMet: function (password) {
    return PASSWORD_REQUIREMENTS.filter((requirement) => {
      return requirement.test(password);
    });
  },
  meetsMinimumCharacters: function (password) {
    return password.length >= 6;
  },
  countTotalRequirements: () => (PASSWORD_REQUIREMENTS.length),
}



