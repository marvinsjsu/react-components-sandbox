import axios from 'axios';

import { HOST } from './constants';

export const Api = {
  login: function ({ email, password }) {

    const userCreds = {
      email: email,
      password: password
    };

    return axios.post(`${HOST}/login`, userCreds)
      .then(response => {

        return response;
      })
      .catch(error => {
        console.log(error);
        return error.response.data;

      });
  },
  login2FA: function ({ token, email, password }) {

    const userCreds = {
      '2fa_token': token,
      email,
      password
    };

    return axios.post(`${HOST}/login`, userCreds)
      .then(response => {

        return response;
      })
      .catch(error => {
        console.log(error);
        return error.response.data;

      });

  },
  register: function ({ email, password, password_confirmation, redirect }) {

    const user = {
      email: email,
      password: password,
      password_confirmation: password_confirmation,
      redirect: redirect,
    };

    return axios.post(`${HOST}/register`, user)
      .then(response => {
        return response;
      })
      .catch(error => {
        console.log("error: ", error.response);
        return error.response;
      });
  },
  passwordReset: function ({ email, redirect }) {

    const postData = {
      email: email,
      redirect: redirect,
    }

    return axios.post(`${HOST}/password/email`, postData)
      .then(response => {
        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  passwordUpdate: function ({ token, email, password, passwordConfirmation }) {

    const postData = {
      token: token,
      email: email,
      password: password,
      password_confirmation: passwordConfirmation,
    };

    const headers = {
      Authorization: `Bearer ${token}`
    }

    console.log('API passwordUpdate postData: ', postData);

    return axios.post(`${HOST}/password/reset`, postData, headers)
      .then(response => {
        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  patchPasswordUpdate: function ({ userId, oldPassword, newPassword, passwordConfirmation, accessToken, totp }) {

    const patchData = {
      totp,
      old_password: oldPassword,
      password: newPassword,
      password_confirmation: passwordConfirmation,
    };

    const headers = {
      Authorization: `Bearer ${accessToken}`
    }

    return axios.patch(`${HOST}/users/${userId}/password`, patchData, {headers})
      .then(response => {

        console.log('patchPasswordUpdate response: ', response);
        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  getQRImageData: function ({ userId, accessToken, totp }) {

    const headers = {
      Authorization: `Bearer ${accessToken}`,
    }

    return axios.post(`${HOST}/users/${userId}/2fa`, { totp }, {headers})
      .then(response => {

        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  verify2FAToken: function ({ token, userId, accessToken }) {
    const headers = {
      Authorization: `Bearer ${accessToken}`,
    }

    return axios.post(`${HOST}/users/${userId}/2fa/verify`, { token }, {headers})
      .then(response => {

        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  enable2FA: function ({ userId, accessToken }) {

    const headers = {
      Authorization: `Bearer ${accessToken}`,
    }

    const data = {
      settings: {
        use_two_factor_auth: true
      }
    };

    return axios.patch(`${HOST}/users/${userId}/settings`, data, {headers})
      .then(response => {

        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  disable2FA: function ({ userId, accessToken }) {
    const headers = {
      Authorization: `Bearer ${accessToken}`
    }

    const data = {
      settings: {
        use_two_factor_auth: false
      }
    };

    return axios.patch(`${HOST}/users/${userId}/settings`, data, {headers})
      .then(response => {

        return response;
      })
      .catch(error => {
        return error.response;
      });
  },
  getTOTP: function ({ userId, password, accessToken }) {
    const headers = {
      Authorization: `Bearer ${accessToken}`
    }

    return axios.post(`${HOST}/users/${userId}/totp`, { password }, {headers})
      .then(response => {

        return response;
      })
      .catch(error => {
        return error.response;
      });
  }
}