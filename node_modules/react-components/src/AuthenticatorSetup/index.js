import React, { Component } from 'react';
import { Link, Redirect } from 'react-router-dom';

import { styles } from '../../utils/styles';
import Container from '../Shared/Container';
import BottomLinks from '../Shared/BottomLinks';
import AuthySetup from './authySetup';
import GoogleSetup from './googleSetup';
import MainSetup from './mainSetup';
import Verification from './verification';
import Finish from './finish.js';
// import NextButton from './nextButton';
import NextButton from '../Shared/NextButton';
import VerifyButton from './verifyButton';
import DoneButton from './doneButton';

export default class AuthenticatorSetup extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: 'main',
      setupComplete: false,
      verificationCode: '',
      error: false,
      errorMessage: '',
      renderComponent: true,
    };

    this.displayGoogleSetup = this.displayGoogleSetup.bind(this);
    this.displayAuthySetup = this.displayAuthySetup.bind(this);
    this.onClickVerify = this.onClickVerify.bind(this);
    this.onClickNext = this.onClickNext.bind(this);
    this.onClickDone = this.onClickDone.bind(this);
    this.onClickCancel = this.onClickCancel.bind(this);
    this.updateVerificationCode = this.updateVerificationCode.bind(this);
  }

  displayGoogleSetup(e) {
    e.preventDefault();
    this.setState({
      instructionSet: 'google',
    });
  }

  displayAuthySetup(e) {
    e.preventDefault();
    this.setState({
      instructionSet: 'authy',
    });
  }

  onClickVerify() {
    this.setState({
      instructionSet: 'finished',
    });
  }

  onClickNext() {
    this.setState({
      instructionSet: 'verification_code'
    });
  }

  onClickDone() {
    this.setState({
      setupComplete: true,
    });

    this.unRenderComponent();
  }

  onClickCancel() {
    const { onClickCancel } = this.props;

    if (onClickCancel && typeof onClickCancel === 'function') {
      onClickCancel();
    }

    this.unRenderComponent();
  }

  updateVerificationCode(e) {
    this.setState({
      verificationCode: e.target.value,
    });
  }

  unRenderComponent() {
    this.setState({
      renderComponent: false,
    });
  }

  render() {
    const { instructionSet, verificationCode, renderComponent } = this.state;
    const { customStyles = {}, referrerPath, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}, linkStyle = {}} = customStyles;

    if (!renderComponent) {
      return false;
    }

    let contentTitle = 'Setup Authenticator';
    let instructionsDisplay = (
      <MainSetup />
    );

    switch (instructionSet) {
      case 'main':
        instructionsDisplay = (
          <div style={styles.section}>
            <MainSetup onClick={this.displayAuthySetup}/>
            <NextButton
              exitLabel={'Skip'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>
        );
      break;
      case 'google':
        instructionsDisplay = (
          <div style={styles.section}>
            <GoogleSetup onClick={this.displayAuthySetup}/>
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>

        );
      break;
      case 'authy':
        instructionsDisplay = (
          <div style={styles.section}>
            <AuthySetup onClick={this.displayGoogleSetup}/>
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>
        );
      break;
      case 'verification_code':
        instructionsDisplay = (
          <div style={styles.section}>
            <Verification
              verificationCode={verificationCode}
              updateVerificationCode={this.updateVerificationCode}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickVerify}
            />
          </div>
        );
      break;
      case 'finished':
        instructionsDisplay = (
          <div style={styles.section}>
            <Finish />
            <NextButton
              nextLabel={'Done'}
              onClickNext={this.onClickDone}
            />
          </div>
        );
      break;
      default:
        instructionsDisplay = (
          <div style={styles.section}>
            <MainSetup onClick={this.displayAuthySetup}/>
            <NextButton onClickNext={this.onClickNext}/>
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          { instructionsDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}

