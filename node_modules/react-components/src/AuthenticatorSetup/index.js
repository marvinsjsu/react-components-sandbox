import React, { Component } from 'react';
import { Link, Redirect } from 'react-router-dom';

import { styles } from '../../utils/styles';
import { Api } from '../../utils/api';
import { Cookie } from '../../utils/cookie';
import Container from '../Shared/Container';
import BottomLinks from '../Shared/BottomLinks';
import AuthySetup from './authySetup';
import GoogleSetup from './googleSetup';
import MainSetup from './mainSetup';
import Verification from './verification';
import Finish from './finish.js';
// import NextButton from './nextButton';
import NextButton from '../Shared/NextButton';
import VerifyButton from './verifyButton';
import DoneButton from './doneButton';
import PasswordEntry from './passwordEntry';

export default class AuthenticatorSetup extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: 'main',
      setupComplete: false,
      verificationCode: '',
      error: false,
      errorMessage: '',
      renderComponent: true,
      qrImageData: null,
      password: '',
      totp: null,
      email: '',
    };

    this._isMounted = false;
    this.displayGoogleSetup = this.displayGoogleSetup.bind(this);
    this.displayAuthySetup = this.displayAuthySetup.bind(this);
    this.onClickVerify = this.onClickVerify.bind(this);
    this.onClickNext = this.onClickNext.bind(this);
    this.onClickDone = this.onClickDone.bind(this);
    this.onClickCancel = this.onClickCancel.bind(this);
    this.updateVerificationCode = this.updateVerificationCode.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.onClickForgotPassword = this.onClickForgotPassword.bind(this);
    this.verifyPassword = this.verifyPassword.bind(this);
  }

  componentDidMount() {

    this._isMounted = true;

    try {
      const accessToken = Cookie.getAccessToken();
      const user = Cookie.getUser();
      const totp = Cookie.getTOTP();

      this.setState({
        email: user.email,
      });

      if (accessToken && accessToken.length > 0 && user && user.id) {

        Api.getQRImageData({userId: user.id, accessToken: accessToken, totp: totp})
          .then(response => {

            if (response && response.status === 200 && response.data && response.data.data && this._isMounted) {
              this.setState({
                qrImageData: response.data.data,
              });
            } else if (response && response.status === 401) {
              this.setState({
                instructionSet: 'password_entry'
              });
            } else {
              if (this._isMounted) {
                this.setState({
                  error: true,
                  errorMessage: 'Unable to retrieve QR code.',
                });

              }
            }
          })
      }

    } catch (error) {
      console.log('Unable to get access token / user from cookie.');
    }
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  displayGoogleSetup(e) {
    e.preventDefault();
    this.setState({
      instructionSet: 'google',
    });
  }

  displayAuthySetup(e) {
    e.preventDefault();
    this.setState({
      instructionSet: 'authy',
    });
  }

  updatePassword(e) {
    this.setState({
      password: e.target.value,
    });
  }

  onClickForgotPassword(e) {
    const { forgotPasswordCB, displayComponent } = this.props;

    if (forgotPasswordCB && typeof forgotPasswordCB === 'function') {
      forgotPasswordCB();
    }

    if (this._isMounted) {
      displayComponent('password_reset');
    }
  }

  onClickVerify() {

    try {
      const accessToken = Cookie.getAccessToken();
      const user = Cookie.getUser();

      if (accessToken && accessToken.length > 0 && user && user.id) {

        Api.verify2FAToken({userId: user.id, accessToken: accessToken, token: this.state.verificationCode})
          .then(response => {

            if (response && response.status === 204) {
              Api.enable2FA({ userId: user.id, accessToken: accessToken })
                .then(res => {

                  this.setState({
                    instructionSet: 'finished',
                  });
                })
                .catch(error => {
                  this.setState({
                    error: true,
                    errorMessage: 'Unable to update user 2FA settings at this time.'
                  });
                });

            } else {
              this.setState({
                error: true,
                errorMessage: response.data.message || 'Verification failed.',
              });
            }

          })
          .catch(error => {
            this.setState({
              error: true,
              errorMessage: 'Unable to verify access code at this time.'
            });
          });
      }

    } catch (error) {
      console.log('Unable to verify access code - ', error);
    }
  }

  onClickNext() {
    this.setState({
      instructionSet: 'verification_code'
    });
  }

  onClickDone() {
    const { successCB } = this.props;

    this.setState({
      setupComplete: true,
    });

    if (successCB && typeof successCB === 'function') {
      successCB();
    }

    this.unRenderComponent();
  }

  onClickCancel() {
    const { onClickCancel } = this.props;

    if (onClickCancel && typeof onClickCancel === 'function') {
      onClickCancel();
    }

    this.unRenderComponent();
  }

  updateVerificationCode(e) {
    this.setState({
      verificationCode: e.target.value,
    });
  }

  unRenderComponent() {
    if (this._isMounted) {
      this.setState({
        renderComponent: false,
      });
    }
  }

  verifyPassword() {
    const { password } = this.state;
    const accessToken = Cookie.getAccessToken();
    const user = Cookie.getUser();

    if (user && accessToken && password) {
      Api.getTOTP({ userId: user.id, password, accessToken })
      .then(response => {
        if (response.status === 200) {

          const totp = response.data.totp;

          this.setState({
            totp
          }, () => {
            Api.getQRImageData({ userId: user.id, totp, accessToken })
              .then(response => {
                this.setState({
                  qrImageData: response.data.data,
                  instructionSet: 'main',
                });
              });
          });
        } else {
          this.setState({
            error: true,
            errorMessage: response.data.message,
          });
        }
      });
    }
  }

  render() {
    const { instructionSet, verificationCode, renderComponent, qrImageData, password, error, errorMessage, email } = this.state;
    const { customStyles = {}, referrerPath, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}, linkStyle = {}} = customStyles;

    if (!renderComponent) {
      return false;
    }

    let contentTitle = 'Setup Authenticator';
    let instructionsDisplay = (
      <MainSetup />
    );

    switch (instructionSet) {
      case 'main':
        instructionsDisplay = (
          <div style={styles.section}>
            <MainSetup
              qrImageData={qrImageData}
              onClick={this.displayAuthySetup}
            />
            <NextButton
              exitLabel={'Skip'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>
        );
      break;
      case 'google':
        instructionsDisplay = (
          <div style={styles.section}>
            <GoogleSetup onClick={this.displayAuthySetup}/>
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>

        );
      break;
      case 'authy':
        instructionsDisplay = (
          <div style={styles.section}>
            <AuthySetup onClick={this.displayGoogleSetup}/>
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>
        );
      break;
      case 'verification_code':
        instructionsDisplay = (
          <div style={styles.section}>
            <Verification
              verificationCode={verificationCode}
              updateVerificationCode={this.updateVerificationCode}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickVerify}
            />
          </div>
        );
      break;
      case 'finished':
        instructionsDisplay = (
          <div style={styles.section}>
            <Finish />
            <NextButton
              nextLabel={'Done'}
              onClickNext={this.onClickDone}
            />
          </div>
        );
      break;
      case 'password_entry':
        instructionsDisplay = (
          <div style={styles.section}>
            <PasswordEntry
              password={password}
              updatePassword={this.updatePassword}
              onClickForgotPassword={this.onClickForgotPassword}
              error={error}
              errorMessage={errorMessage}
              userEmail={email}
            />
            <NextButton
              nextLabel={'Verify'}
              onClickNext={this.verifyPassword}
            />
          </div>
        );
      break;
      default:
        instructionsDisplay = (
          <div style={styles.section}>
            <MainSetup onClick={this.displayAuthySetup}/>
            <NextButton onClickNext={this.onClickNext}/>
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          { instructionsDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}

