import React, { Component } from 'react';
import { SlideDown } from 'react-slidedown';
import 'react-slidedown/lib/slidedown.css';
import Reaptcha from 'reaptcha';
import { StyleSheet, css } from 'aphrodite';

import { Api } from '../../utils/api';
import { EXTERNAL_LINKS } from '../../utils/links';
import { Password } from '../../utils/password';
import { Cookie } from '../../utils/cookie';
import LoadingButton from '../LoadingButton';
import BottomLinks from '../Shared/BottomLinks';
import Container from '../Shared/Container';
import PasswordStrengthDisplay from '../Shared/PasswordStrengthDisplay';
import PasswordTooltip from '../Shared/PasswordTooltip';
import { styles } from '../../utils/styles';
import { MESSAGE } from '../../utils/messages';

export default class Register extends Component {

  constructor(props) {
    super(props);
    this.state = {
      email: '',
      password: '',
      password_confirmation: '',
      redirect: '',
      error: false,
      errorMessage: '',
      signUpSuccess: false,
      resendMessage: false,
      showLoader: false,
      disableNext: true,
      passwordMismatch: false,
      usedEmail: false,
    }

    this.updateEmail = this.updateEmail.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.updatePasswordConfirmation = this.updatePasswordConfirmation.bind(this);
    this.verifyCallback = this.verifyCallback.bind(this);
    this.onClick = this.onClick.bind(this);
    this.checkPasswords = this.checkPasswords.bind(this);
    this._buildRedirectUrl = this._buildRedirectUrl.bind(this);
    this._passwordMatches = this._passwordMatches.bind(this);
  }

  componentDidMount() {
    const { redirectUrl } = this.props;

    if (redirectUrl) {
      this.setState({
        redirect: redirect
      });
    } else {
      this.setState({
        redirect: this._buildRedirectUrl(),
      })
    }

    const script = document.createElement("script");
    script.src = "https://www.google.com/recaptcha/api.js";
    script.async = true;
    script.defer = true;

    document.body.appendChild(script);
  }

  updateEmail(e) {
    this.setState({
      email: e.target.value
    })
  }

  updatePassword(e) {
    this.setState({
      password: e.target.value
    })
  }

  updatePasswordConfirmation(e) {
    this.setState({
      password_confirmation: e.target.value,
      passwordMismatch: e.target.value !== this.state.password,
    })
  }

  onClick(event) {
    event.preventDefault();

    if (this._passwordMatches(this.state.password, this.state.password_confirmation)) {

      const { successCB, errorCB } = this.props;

      this.setState({
        loading: true,
        error: false,
        errorMessage: '',
      });

      Api.register(this.state)
        .then(response => {

          if (!response) {
            this.setState({
              error: true,
              errorMessage: 'Something went wrong.  Please try again.',
              loading: false,
            });
          }

          if (response && response.data && response.data.errors) {

            this.setState({
              error: true,
              errorMessage: response.data.message,
              loading: false,
            });

            if (response.data.errors['email']) {
              this.setState({
                error: true,
                errorMessage: response.data.errors['email'],
                usedEmail: true,
                loading: false,
              });
            }

            if (errorCB && typeof errorCB === 'function') {
              errorCB();
            }
          }

          if (response && response.data && !response.data.errors) {
            Cookie.saveUser(response.data);

            if (successCB && typeof successCB === 'function') {
              successCB();
            }

            // this.setState({
            //   redirectToReferrer: true
            // });
          }
        });
    } else {
      this.setState({
        passwordMismatch: true
      });
    }
  }

  checkPasswords() {

    const passwordMismatch = !this._passwordMatches(this.state.password, this.state.password_confirmation);
    this.setState({
      passwordMismatch: passwordMismatch,
    });
  }

  verifyCallback() {
    this.setState({
      disableNext: false
    });
  }

  _buildRedirectUrl() {
    return window.location.origin + '/login';
  }

  _passwordMatches(password, passwordConfirmation) {
    if (!password) {
      return false;
    }

    return password == passwordConfirmation;
  }

  render () {
    const { error, errorMessage, email, password, password_confirmation, showLoader, redirect, disableNext, passwordMismatch, usedEmail } = this.state;
    const { customStyles = {}, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}} = customStyles;

    let passwordMismatchStyle = {};
    if (passwordMismatch) {
      passwordMismatchStyle = styles.invalidInput;
    }

    let usedEmailStyle = {};
    if (usedEmail) {
      usedEmailStyle = styles.invalidInput;
    }

    return (
      <div>
        <Container
          contentTitle={'Create account'}
        >
          <form
            style={{
              ...styles.form,
              ...formStyle,
            }}
            autoComplete="off"
          >
          <div
            style={{
              ...styles.labelContainer,
              ...labelContainerStyle,
            }}
          >
            <label
              style={{
                ...styles.label,
                ...labelStyle
              }}
              htmlFor="email43"
            >
              *Email
            </label>
          </div>
          <input
            style={{
              ...styles.input,
              ...inputStyle,
              ...usedEmailStyle,
            }}
            type="email"
            name="username"
            placeholder="Email address"
            value={email}
            onChange={this.updateEmail}
            required
          />
          <SlideDown
            closed={!error}
            className="wide"
          >
            <p
              style={{
                ...styles.error,
                ...errorStyle
              }}
            >
              { errorMessage }
            </p>
          </SlideDown>
            <ul
              style={{
                ...styles.passwordContainer
              }}
            >
              <li
                style={styles.leftItem}
              >
                <div
                  style={{
                    ...styles.labelContainer,
                    ...labelContainerStyle,
                  }}
                >
                  <label
                    style={{
                      ...styles.label,
                      ...labelStyle
                    }}
                    htmlFor="password42"
                  >
                    *Password
                    <PasswordTooltip
                      password={password}
                    />
                  </label>
                </div>
                <input
                  style={{
                    ...styles.input,
                    ...inputStyle,
                    ...passwordMismatchStyle,
                  }}
                  id="password42"
                  type="password"
                  name="password"
                  placeholder="Password"
                  value={password}
                  onChange={this.updatePassword}
                  required
                />
              </li>
              <li
                style={styles.rightItem}
              >
                <div
                  style={{
                    ...styles.labelContainer,
                    ...labelContainerStyle,
                  }}
                >
                  <label
                    style={{
                      ...styles.label,
                      ...labelStyle
                    }}
                    htmlFor="password42confirm"
                  >
                    *Confirm Password
                  </label>
                </div>
                <input
                  style={{
                    ...styles.input,
                    ...inputStyle,
                    ...passwordMismatchStyle,
                  }}
                  id="password42confirm"
                  type="password"
                  name="password_confirmation"
                  value={password_confirmation}
                  placeholder="Repeat"
                  onChange={this.updatePasswordConfirmation}
                  onBlur={this.checkPasswords}
                  required
                />
              </li>
            </ul>

            <p
              style={{
                ...styles.passwordStatement
              }}
            >
              Use 6 or more characters with a mix of letters, numbers & symbols.
            </p>
            <PasswordStrengthDisplay
              password={password}
              passwordMismatch={passwordMismatch}
            />

            <Reaptcha
              className={'g-recaptcha ' + css(recaptchaStyle.widgit)}
              size="normal"
              sitekey="6LeteIMUAAAAAHs6I-qLFy01dt4LgW0hBWlicK5v"
              onVerify={this.verifyCallback}
            />

            <br/>

            <span
              style={{
                ...styles.statement
              }}
            >
              By clicking Next, I agree to the Presearch
              <a
                style={{
                  ...styles.link
                }}
                href={EXTERNAL_LINKS.TERMS_AND_CONDITIONS}
                target="_blank"
              >
                {" "}Terms of Conditions
              </a> and
              <a
                style={{
                  ...styles.link
                }}
                href={EXTERNAL_LINKS.PRIVACY_POLICY}
                target="_blank"
              >
                {" "}Privacy Policy
              </a>.
              <br/>
              <br/>
            </span>

            <div
              style={{
                ...styles.bottomLine
              }}
            >
              <span
                style={{
                  ...styles.statement
                }}
              >
                Already have an account?
                <a
                  style={{
                    ...styles.link
                  }}
                  href="#"
                  onClick={() => displayComponent('login')}
                >
                  {" "}Sign in.
                </a>
              </span>
              <button
                style={{
                  ...styles.button
                }}
                onClick={this.onClick}
                disabled={disableNext || passwordMismatch}
              >
                Next
              </button>
            </div>
          </form>
        </Container>
        <BottomLinks />
      </div>
    );
  }
}

const recaptchaStyle = StyleSheet.create({
    widgit: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'center',
        backgroundColor: '#FFFFFF',//'#F9F9F9',
        width: '100%',
    },
});
