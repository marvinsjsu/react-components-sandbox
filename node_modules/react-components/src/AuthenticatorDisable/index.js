import React, { Component } from 'react';

import { styles } from '../../utils/styles';
import { Cookie } from '../../utils/cookie';
import NextButton from '../Shared/NextButton';
import Container from '../Shared/Container';
import BottomLinks from '../Shared/BottomLinks';
import ErrorMessage from '../Shared/ErrorMessage';
import PasswordEntry from './passwordEntry';
import DisableTwoStep from './disableTwoStep';
import Finished from './finished';

const DISABLE_STEPS = [
  'password_entry',
  'disable_two_step',
  'finished'
];

export default class AuthenticatorDisable extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: 'password_entry',
      currStepIdx: 0,
      user: {},
      password: '',
      disableTwoStep: false,
      error: false,
      errorMessage: '',
      renderComponent: true,
    };

    this.onClickForgotPassword = this.onClickForgotPassword.bind(this);
    this.onClickCancel = this.onClickCancel.bind(this);
    this.onClickNext = this.onClickNext.bind(this);
    this.onClickDone = this.onClickDone.bind(this);
    this.onClickTurnItBackOn = this.onClickTurnItBackOn.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.onClickDisable = this.onClickDisable.bind(this);
    this.unRenderComponent = this.unRenderComponent.bind(this);
  }

  componentDidMount() {

    try {
      const user = Cookie.getUser();

      this.setState({
        user: user,
      });
    }
    catch (error) {
      this.setState({
        error: true,
        errorMessage: 'Unable to retrieve user info from cookie.',
      });
    }
  }

  onClickForgotPassword(e) {
    const { forgotPasswordCB } = this.props;

    if (forgotPasswordCB && typeof forgotPasswordCB === 'function') {
      forgotPasswordCB();
    }
  }

  onClickCancel() {
    const { onClickCancel } = this.props;

    if (onClickCancel && typeof onClickCancel === 'function') {
      onClickCancel();
    }

    this.unRenderComponent();
  }

  onClickNext() {

    const currStepIdx = this.state.currStepIdx;
    const nextStepIdx = currStepIdx + 1;

    if (currStepIdx === 1 && !this.state.disableTwoStep) {
      this.onClickCancel();
    }

    if (nextStepIdx < DISABLE_STEPS.length) {
      this.setState({
        currStepIdx: nextStepIdx,
        instructionSet: DISABLE_STEPS[nextStepIdx],
      });
    }
  }

  onClickDone() {
    const { onClickDone } = this.props;

    if (onClickDone && typeof onClickDone === 'function') {
      onClickDone();
    }
  }

  onClickTurnItBackOn() {
    const { displayComponent } = this.props;
    displayComponent('authenticator_setup');
  }

  onClickDisable(e) {
    this.setState({
      disableTwoStep: e.target.value === 'true',
    });
  }

  updatePassword(e) {
    this.setState({
      password: e.target.value,
    });
  }

  unRenderComponent() {
    this.setState({
      renderComponent: false,
    });
  }

  render() {

    const { instructionSet, user, password, disableTwoStep, error, errorMessage, renderComponent } = this.state;

    if (!renderComponent) {
      return false;
    }

    let contentTitle;
    let instructionsDisplay;
    let userEmail = '';
    let userFullname = '';

    if (user && user.email && user.profile) {
      userEmail = user.email;
      userFullname = `${user.profile.first_name} ${user.profile.last_name}`;
    }

    switch (instructionSet) {
      case 'password_entry':
        contentTitle = userFullname;
        instructionsDisplay = (
          <div>
            <PasswordEntry
              userEmail={userEmail}
              password={password}
              updatePassword={this.updatePassword}
              onClickForgotPassword={this.onClickForgotPassword}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
              disabled={password.length === 0}
            />
          </div>
        );
      break;
      case 'disable_two_step':
        contentTitle = 'Disable 2-step verification?';
        instructionsDisplay = (
          <div>
            <DisableTwoStep
              disableTwoStep={disableTwoStep}
              onClickDisable={this.onClickDisable}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>
        );
      break;
      case 'finished':
        contentTitle = '2-step verification disabled';
        instructionsDisplay = (
          <div>
            <Finished
              userEmail={userEmail}
            />
            <NextButton
              exitLabel={'Turn it back on'}
              onClickExit={this.onClickTurnItBackOn}
              nextLabel={'Done'}
              onClickNext={this.onClickDone}
            />
          </div>
        );
      break;
      default:
        contentTitle = userFullname;
        instructionsDisplay = (
          <div>
            <PasswordEntry
              userEmail={userEmail}
              password={password}
              updatePassword={this.updatePassword}
              onClickForgotPassword={this.onClickForgotPassword}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
              disabled={password.length === 0}
            />
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          <ErrorMessage
            error={error}
            errorMessage={errorMessage}
          />
          { instructionsDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}