import React, { Component } from 'react';

import { Api } from '../../utils/api';
import { styles } from '../../utils/styles';
import { Cookie } from '../../utils/cookie';
import NextButton from '../Shared/NextButton';
import Container from '../Shared/Container';
import BottomLinks from '../Shared/BottomLinks';
import ErrorMessage from '../Shared/ErrorMessage';
import PasswordEntry from './passwordEntry';
import DisableTwoStep from './disableTwoStep';
import Finished from './finished';

const DISABLE_STEPS = [
  'password_entry',
  'disable_two_step',
  'finished'
];

export default class AuthenticatorDisable extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: 'password_entry',
      currStepIdx: 0,
      user: {},
      password: '',
      disableTwoStep: false,
      error: false,
      errorMessage: '',
      renderComponent: true,
      totp: null,
    };

    this._isMounted = false;
    this.onClickForgotPassword = this.onClickForgotPassword.bind(this);
    this.onClickCancel = this.onClickCancel.bind(this);
    this.onClickNext = this.onClickNext.bind(this);
    this.onClickDone = this.onClickDone.bind(this);
    this.onClickTurnItBackOn = this.onClickTurnItBackOn.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.onClickDisable = this.onClickDisable.bind(this);
    this.unRenderComponent = this.unRenderComponent.bind(this);
    this.verifyPassword = this.verifyPassword.bind(this);
    this._disable2FA = this._disable2FA.bind(this);
  }

  componentDidMount() {
    this._isMounted = true;

    try {
      const user = Cookie.getUser();

      this.setState({
        user: user,
      });
    }
    catch (error) {
      this.setState({
        error: true,
        errorMessage: 'Unable to retrieve user info from cookie.',
      });
    }
  }

  onClickForgotPassword(e) {
    const { forgotPasswordCB } = this.props;

    if (forgotPasswordCB && typeof forgotPasswordCB === 'function') {
      forgotPasswordCB();
    }
  }

  onClickCancel() {
    const { onClickCancel } = this.props;

    if (onClickCancel && typeof onClickCancel === 'function') {
      onClickCancel();
    }

    this.unRenderComponent();
  }

  onClickNext() {

// when click next and in 2nd step and disable toggle is true
// trigger api call to change settings

    const currStepIdx = this.state.currStepIdx;
    const nextStepIdx = currStepIdx + 1;

    if (currStepIdx === 1 && !this.state.disableTwoStep) {
      this.onClickCancel();
    }

    if (currStepIdx === 1 && this.state.disableTwoStep) {
      this._disable2FA();
    }

    if (currStepIdx === 0) {
      this.verifyPassword();
      return false;
    }

    if (nextStepIdx < DISABLE_STEPS.length) {
      this.setState({
        currStepIdx: nextStepIdx,
        instructionSet: DISABLE_STEPS[nextStepIdx],
      });
    }
  }

  onClickDone() {
    const { onClickDone } = this.props;

    if (onClickDone && typeof onClickDone === 'function') {
      onClickDone();
    }

    if (this._isMounted) {
      this.unRenderComponent();
    }
  }

  onClickTurnItBackOn() {
    const { displayComponent } = this.props;
    displayComponent('authenticator_setup');
  }

  onClickDisable(e) {
    this.setState({
      disableTwoStep: e.target.value === 'true',
    });
  }

  updatePassword(e) {
    this.setState({
      password: e.target.value,
    });
  }

  unRenderComponent() {
    this.setState({
      renderComponent: false,
    });
  }

  verifyPassword() {
    const { password } = this.state;
    const accessToken = Cookie.getAccessToken();
    const user = Cookie.getUser();

    this.setState({
      error: false,
      errorMessage: '',
    });

    if (user && accessToken && password) {
      Api.getTOTP({ userId: user.id, password, accessToken })
      .then(response => {
        if (response.status === 200) {

          const newCurrStepIdx = this.state.currStepIdx + 1;

          this.setState({
            totp: response.data.totp,
            currStepIdx: newCurrStepIdx,
            instructionSet: DISABLE_STEPS[newCurrStepIdx],
          });
        } else {
          this.setState({
            error: true,
            errorMessage: response.data.message,
          });
        }
      });
    }
  }

  _disable2FA() {
    try {
      const accessToken = Cookie.getAccessToken();
      const user = Cookie.getUser();

      if (accessToken && accessToken.length > 0 && user && user.id) {

        Api.disable2FA({ userId: user.id, accessToken: accessToken })
          .then(res => {

            this.setState({
              instructionSet: 'finished',
            });
          })
          .catch(error => {
            this.setState({
              error: true,
              errorMessage: 'Unable to update user 2FA settings at this time.'
            });
          });

      }

    } catch (error) {
      console.log('Unable to verify access code - ', error);
    }
  }

  render() {

    const { instructionSet, user, password, disableTwoStep, error, errorMessage, renderComponent } = this.state;

    if (!renderComponent) {
      return false;
    }

    let contentTitle;
    let instructionsDisplay;
    let userEmail = '';
    let userFullname = '';

    if (user && user.email && user.profile) {
      userEmail = user.email;
      userFullname = `${user.profile.first_name || ''} ${user.profile.last_name || ''}`;
    }

    switch (instructionSet) {
      case 'password_entry':
        contentTitle = userFullname;
        instructionsDisplay = (
          <div>
            <PasswordEntry
              userEmail={userEmail}
              password={password}
              updatePassword={this.updatePassword}
              onClickForgotPassword={this.onClickForgotPassword}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
              disabled={password.length === 0}
            />
          </div>
        );
      break;
      case 'disable_two_step':
        contentTitle = 'Disable 2-step verification?';
        instructionsDisplay = (
          <div>
            <DisableTwoStep
              disableTwoStep={disableTwoStep}
              onClickDisable={this.onClickDisable}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
            />
          </div>
        );
      break;
      case 'finished':
        contentTitle = '2-step verification disabled';
        instructionsDisplay = (
          <div>
            <Finished
              userEmail={userEmail}
            />
            <NextButton
              exitLabel={'Turn it back on'}
              onClickExit={this.onClickTurnItBackOn}
              nextLabel={'Done'}
              onClickNext={this.onClickDone}
            />
          </div>
        );
      break;
      default:
        contentTitle = userFullname;
        instructionsDisplay = (
          <div>
            <PasswordEntry
              userEmail={userEmail}
              password={password}
              updatePassword={this.updatePassword}
              onClickForgotPassword={this.onClickForgotPassword}
              error={error}
              errorMessage={errorMessage}
            />
            <NextButton
              exitLabel={'Cancel'}
              onClickExit={this.onClickCancel}
              nextLabel={'Next'}
              onClickNext={this.onClickNext}
              disabled={password.length === 0}
            />
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          <ErrorMessage
            error={error}
            errorMessage={errorMessage}
          />
          { instructionsDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}