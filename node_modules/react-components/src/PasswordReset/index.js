import React, { Component } from 'react';
import { SlideDown } from 'react-slidedown';
import 'react-slidedown/lib/slidedown.css';

import { Api } from '../../utils/api';
import { styles } from '../../utils/styles';
import { Cookie } from '../../utils/cookie';
import NextButton from '../Shared/NextButton';
import Container from '../Shared/Container';
import ErrorMessage from '../Shared/ErrorMessage';

import BottomLinks from '../Shared/BottomLinks';
import EmailInput from './emailInput';
import Finish from './finish';

const RESET_STEPS = [
  'email_input',
  'finished',
];

export default class PasswordReset extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: '',
      currStepIdx: 0,
      email: '',
      error: false,
      errorMessage: '',
    };

    this.updateEmail = this.updateEmail.bind(this);
    this.onClickSignIn = this.onClickSignIn.bind(this);
    this.onSubmitEmail = this.onSubmitEmail.bind(this);
  }

  componentDidMount() {
    this.setState({
      instructionSet: 'email_input',
      currStepIdx: 0,
      email: '',
      error: false,
      errorMessage: '',
    });
  }

  updateEmail(e) {
    this.setState({
      email: e.target.value,
    });
  }

  onClickSignIn() {
    const { signInCB } = this.props;

    if (signInCB && typeof signInCB === 'function') {
      signInCB();
    }
  }

  onSubmitEmail(e) {
    e.preventDefault();
    const { redirect, errorCB } = this.props;

    this.setState({
      error: false,
      errorMessage: '',
      loading: true,
    });

    if (redirect) {
      const passwordResetData = {
        email: this.state.email,
        redirect: redirect,
      };

      Cookie.saveUserEmail(this.state.email);

      Api.passwordReset(passwordResetData)
        .then(response => {
          if (!response) {
            this.setState({
              error: true,
              errorMessage: 'Something went wrong.  Please try again.',
              loading: false,
            });
          }

          if (response && response.data && response.data.success === false) {
            this.setState({
              error: true,
              errorMessage: response.data.message || 'Error in api call.',
              loading: false,
            });

            if (errorCB && typeof errorCB === 'function') {
              errorCB();
            }
          }

          if (response && response.status && response.status === 204) {

            const currStepIdx = this.state.currStepIdx;
            const nextStepIdx = currStepIdx + 1;

            if (nextStepIdx < RESET_STEPS.length) {
              this.setState({
                instructionSet: RESET_STEPS[nextStepIdx],
                currStepIdx: nextStepIdx,
              });
            }
          }
        });
    }
  }

  render () {
    const { email, error, errorMessage, currStepIdx, instructionSet } = this.state;
    const { customStyles = {}, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}, linkStyle = {}} = customStyles;

    let contentTitle = 'Reset your password';
    let instructionDisplay;

    switch (instructionSet) {
      case 'email_input':
        instructionDisplay = (
          <div>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <EmailInput
              email={email}
              onChange={this.updateEmail}
              updateEmail={this.updateEmail}
              onClickSignIn={this.onClickSignIn}
              onSubmit={this.onSubmitEmail}
            />
          </div>
        );
      break;
      case 'finished':
        instructionDisplay = (
          <div>
            <Finish />
            <NextButton
              nextLabel={'Sign in'}
              onClickNext={this.onClickSignIn}
            />
          </div>
        );
      break;
      default:
        instructionDisplay = (
          <div>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <EmailInput
              email={email}
              onChange={this.updateEmail}
              updateEmail={this.updateEmail}
              onClickSignIn={this.onClickSignIn}
              onSubmit={this.onSubmitEmail}
            />
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          { instructionDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}