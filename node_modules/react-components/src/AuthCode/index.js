import React, { Component } from 'react';
import { SlideDown } from 'react-slidedown';
import 'react-slidedown/lib/slidedown.css';

import { Api } from '../../utils/api';
import { Cookie } from '../../utils/cookie';
import { styles } from '../../utils/styles';
import Container from '../Shared/Container';
import BottomLinks from '../Shared/BottomLinks';

export default class AuthCode extends Component {

  constructor(props) {
    super(props);

    this.state = {
      verification_code: '',
      error: false,
      errorMessage: '',
      renderMe: true,
      login2FAUser: null,
    };

    this._isMounted = false;
    this.onClick = this.onClick.bind(this);
    this.updateVerificationCode = this.updateVerificationCode.bind(this);
  }

  componentDidMount() {
    this._isMounted = true;
    const { login2FAUser } = this.props;

    this.setState({
      login2FAUser
    });
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  onClick(event) {
    const { login2FAUser } = this.state;
    const { successCB, errorCB } = this.props;

    if (login2FAUser) {
      login2FAUser.token = this.state.verification_code;

      Api.login2FA(login2FAUser)
        .then(response => {
          if (response.status === 200) {
            Cookie.saveUser(response.data);
            if (successCB && typeof successCB === 'function') {
              successCB();
            }
            if (this._isMounted) {
              this.setState({
                renderMe: false,
              });
            }
          } else {
            if (errorCB && typeof errorCB === 'function') {
              errorCB();
            }
            if (this._isMounted) {
              this.setState({
                error: true,
                errorMessage: response.data.message || 'Unable to verify access code at this time.'
              });
            }
          }
        });
    }

    try {
      const accessToken = Cookie.getAccessToken();
      const user = Cookie.getUser();

      if (accessToken && accessToken.length > 0 && user && user.id) {

        Api.verify2FAToken({userId: user.id, accessToken: accessToken, token: this.state.verification_code})
          .then(response => {

              if (response && response.status === 400) {

                if (errorCB && typeof errorCB === 'function') {
                  errorCB();
                }
                if (this._isMounted) {
                  this.setState({
                    error: true,
                    errorMessage: response.data.message || 'Unable to verify access code at this time.'
                  });
                }
              }

              if (response && response.status === 204) {
                if (successCB && typeof successCB === 'function') {
                  successCB();
                }
                if (this._isMounted) {
                  this.setState({
                    renderMe: false,
                  });
                }
              }

          })
          .catch(error => {

            if (errorCB && typeof errorCB === 'function') {
              errorCB();
            }

            if (this._isMounted) {
              this.setState({
                error: true,
                errorMessage: 'Unable to verify access code at this time.'
              });
            }

          });
      }

    } catch (error) {
      console.log('Unable to verify access code - ', error);
    }
  }

  updateVerificationCode(event) {
    this.setState({
      verification_code: event.target.value,
    });
  }

  render () {
    const { verification_code, error, errorMessage, renderMe } = this.state;
    const { customStyles = {}, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}, linkStyle = {}} = customStyles;
    const contentTitle = 'Verify your login';

    if (!renderMe) {
      return false;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
        <div style={{
            display: 'flex',
            flexDirection: 'column',
            textAlign: 'left',
          }}>

          <p style={styles.statement}>
            Please enter the 6-digit verification code from your Authenticator app.
          </p>

          <div
            style={{
              ...styles.labelContainer,
              ...labelContainerStyle,
            }}
          >
            <label
              style={{
                ...styles.label,
                ...labelStyle
              }}
              htmlFor="verification_code"
            >
              Enter Code
            </label>
          </div>
          <input
            style={{
              ...styles.input,
              ...inputStyle,
            }}
            type="text"
            name="verification_code"
            placeholder="Verification Code"
            value={verification_code}
            onChange={this.updateVerificationCode}
            required
          />
          <SlideDown
            closed={!error}
          >
            <p
              style={{
                ...styles.error,
                ...errorStyle
              }}
            >
              { errorMessage }
            </p>
          </SlideDown>

          <br/>
          <div
            style={{
              ...styles.bottomLine
            }}
          >
            <span
            style={{
              ...styles.statement
            }}
            >
              <button
                style={{
                  ...styles.buttonLink
                }}
                onClick={() => displayComponent('login')}
              >
                Cancel
              </button>
            </span>
            <button
              style={{
                ...styles.button
              }}
              onClick={this.onClick}
            >
              Verify
            </button>
          </div>

          </div>
        </Container>
        <BottomLinks />
      </div>
    );
  }
}