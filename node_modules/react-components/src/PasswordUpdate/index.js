import React, { Component } from 'react';
import { SlideDown } from 'react-slidedown';
import 'react-slidedown/lib/slidedown.css';

import { Api } from '../../utils/api';
import { styles } from '../../utils/styles';
import { Password } from '../../utils/password';
import { Cookie } from '../../utils/cookie';
import NextButton from '../Shared/NextButton';
import Container from '../Shared/Container';
import ErrorMessage from '../Shared/ErrorMessage';
import BottomLinks from '../Shared/BottomLinks';
import PasswordInput from './passwordInput';
import OldPassword from './OldPassword';
import Finish from './finish';

const UPDATE_STEPS = [
  'old_password',
  'password_input',
  'finished',
];

export default class PasswordUpdate extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: '',
      currStepIdx: 0,
      oldPassword: '',
      password: '',
      passwordConfirmation: '',
      userEmail: '',
      token: '',
      error: false,
      errorMessage: '',
      passwordMismatch: false,
      passwordValid: false,
      user: null,
      accessToken: null,
      totp: null,
    };

    this.onClickSignIn = this.onClickSignIn.bind(this);
    this.onSubmitNewPassword = this.onSubmitNewPassword.bind(this);
    this.onSubmitOldPassword = this.onSubmitOldPassword.bind(this);
    this.updateUserEmail = this.updateUserEmail.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.updateOldPassword = this.updateOldPassword.bind(this);
    this.updatePasswordConfirmation = this.updatePasswordConfirmation.bind(this);
    this.checkPasswords = this.checkPasswords.bind(this);
    this._passwordMatches = this._passwordMatches.bind(this);
    this._updateViaPatch = this._updateViaPatch.bind(this);
    this._updateViaPost = this._updateViaPost.bind(this);
    this._handleResponse = this._handleResponse.bind(this);
  }

  componentDidMount() {

    const { initialStep = 'old_password', token = null } = this.props;
    let userEmail = null;
    let user = null;
    let accessToken = null;

    try {
      userEmail = Cookie.getUserEmail();
    } catch (error) {
      console.log('No user email retrieved from cookie.');
    }

    try {
      user = Cookie.getUser();
    } catch (error) {
      console.log('No user retrieved from cookie.');
    }

    if (token) {
      accessToken = token;
    } else {
      try {
        accessToken = Cookie.getAccessToken();
      } catch (error) {
        console.log('No access token retrieved from cookie.');
      }
    }

    this.setState({
      instructionSet: initialStep,
      currStepIdx: 0,
      password: '',
      passwordConfirmation: '',
      userEmail: userEmail,
      token: token,
      error: false,
      errorMessage: '',
      user: user,
      accessToken: accessToken,
    });
  }

  onClickSignIn() {
    const { signInCB, displayComponent } = this.props;

    if (signInCB && typeof signInCB === 'function') {
      signInCB();
    }

    displayComponent('login');
  }

  updateUserEmail(e) {
    this.setState({
      userEmail: e.target.value,
    });
  }

  updatePassword(e) {

    const requirementsMet = Password.countRequirementsMet(e.target.value);

    this.setState({
      password: e.target.value,
      passwordValid: requirementsMet >= 4,
    });
  }

  updateOldPassword(e) {
    this.setState({
      oldPassword: e.target.value,
    });
  }

  updatePasswordConfirmation(e) {
    this.setState({
      passwordConfirmation: e.target.value,
      passwordMismatch: e.target.value !== this.state.password,
    });
  }

  onSubmitNewPassword(e) {
    e.preventDefault();
    const { token, successCB, errorCB } = this.props;

    this.setState({
      error: false,
      errorMessage: '',
      loading: true,
    });

    if (!this._passwordMatches(this.state.password, this.state.passwordConfirmation)) {
      this.setState({
        passwordMismatch: passwordMismatch,
      });

      return false;
    }

    if (!this.state.passwordValid) {
      return false;
    }
// we don't have token or email, don't call api

    let passwordUpdateData = {};

    if (this.state.accessToken && this.state.userEmail && this.state.userEmail.length > 0) {
      passwordUpdateData = {
        token: this.state.accessToken,
        email: this.state.userEmail,
        password: this.state.password,
        passwordConfirmation: this.state.passwordConfirmation,
      };

      this._updateViaPost(passwordUpdateData);
    } else if (this.state.user
      && this.state.user.id
      && this.state.oldPassword
      && this.state.password
      && this.state.passwordConfirmation
      && this.state.accessToken
    ) {
      passwordUpdateData = {
        totp: this.state.totp,
        userId: this.state.user.id,
        oldPassword: this.state.oldPassword,
        newPassword: this.state.password,
        passwordConfirmation: this.state.passwordConfirmation,
        accessToken: this.state.accessToken
      };

      this._updateViaPatch(passwordUpdateData);
    } else {
      this.setState({
        error: true,
        errorMessage: 'Unable to retrieve user information.  Please try again.',
        loading: false,
      });
    }
  }

  _updateViaPatch(patchData) {

    Api.patchPasswordUpdate(patchData)
      .then(this._handleResponse);
  }

  _updateViaPost(postData) {

    Api.passwordUpdate(postData)
      .then(this._handleResponse);
  }

  _handleResponse(response) {

    const { successCB, errorCB } = this.props;

    if (!response) {
      this.setState({
        error: true,
        errorMessage: 'Something went wrong.  Please try again.',
        loading: false,
      });
    }

    if (response && response.status && response.status === 429) {
      this.setState({
        error: true,
        errorMessage: response.message || 'Error in api call.',
        loading: false,
      });

      if (errorCB && typeof errorCB === 'function') {
        errorCB();
      }
    }

    if (response && response.data && !response.data.success) {

      this.setState({
        error: true,
        errorMessage: response.data.message || 'Error in api call.',
        loading: false,
      });

      if (errorCB && typeof errorCB === 'function') {
        errorCB();
      }
    }

    if (response && response.status && response.status === 204) {

      const currStepIdx = this.state.currStepIdx;
      const nextStepIdx = currStepIdx + 1;

      if (nextStepIdx < UPDATE_STEPS.length) {
        this.setState({
          instructionSet: 'finished',
          currStepIdx: nextStepIdx,
        });
      }
    }
  }

  onSubmitOldPassword(e) {
    e.preventDefault();

    const { oldPassword, accessToken, currStepIdx, user } = this.state;
    // send api call to verify password
    // or store old password and send along with new password to current api endpoint
    if (oldPassword && oldPassword.length > 0 && user && user.id) {
      this.setState({
        error: false,
        errorMessage: '',
      });

      Api.getTOTP({ userId: user.id, password: oldPassword, accessToken })
        .then(response => {
          if (response && response.status === 200) {

            const nextStepIdx = currStepIdx + 1;
            this.setState({
              instructionSet: UPDATE_STEPS[nextStepIdx],
              currStepIdx: nextStepIdx,
              totp: response.data.totp,
            });
          }

          if (response && response.status > 400) {
            this.setState({
              error: true,
              errorMessage: response.data.message,
            });
          }
        });
    }
  }

  checkPasswords() {
    const passwordMismatch = !this._passwordMatches(this.state.password, this.state.passwordConfirmation);
    this.setState({
      passwordMismatch: passwordMismatch,
    });
  }

  _passwordMatches(password, passwordConfirmation) {
    if (!password) {
      return false;
    }

    return password == passwordConfirmation;
  }

  render () {
    const { accessToken, userEmail, token, password, oldPassword, passwordConfirmation, error, errorMessage, currStepIdx, instructionSet, passwordMismatch, passwordValid } = this.state;
    const { customStyles = {}, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}, linkStyle = {}} = customStyles;

    let contentTitle = 'Change password';
    let instructionDisplay;

    let passwordMismatchStyle = {};
    if (passwordMismatch) {
      passwordMismatchStyle = styles.invalidInput;
    }

    let instructionSetProxy = instructionSet;
    if (token && currStepIdx === 0) {
      instructionSetProxy = 'password_input';
    }

    switch (instructionSetProxy) {
      case 'old_password':
        instructionDisplay = (
          <div style={styles.section}>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <OldPassword
              password={oldPassword}
              updatePassword={this.updateOldPassword}
              onSubmit={this.onSubmitOldPassword}
            />
          </div>
        );
      break;
      case 'password_input':
        instructionDisplay = (
          <div style={styles.section}>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <PasswordInput
              hasToken={!!accessToken}
              userEmail={userEmail}
              updateUserEmail={this.updateUserEmail}
              password={password}
              updatePassword={this.updatePassword}
              updatePasswordConfirmation={this.updatePasswordConfirmation}
              passwordMismatch={passwordMismatch}
              passwordValid={passwordValid}
              checkPasswords={this.checkPasswords}
              passwordMismatchStyle={passwordMismatchStyle}
              onSubmit={this.onSubmitNewPassword}
            />
          </div>
        );
      break;
      case 'finished':
        instructionDisplay = (
          <div style={styles.section}>
            <Finish />
            <NextButton
              nextLabel={'Sign in'}
              onClickNext={this.onClickSignIn}
            />
          </div>
        );
      break;
      default:
        instructionDisplay = (
          <div style={styles.section}>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <OldPassword
              password={oldPassword}
              updatePassword={this.updateOldPassword}
              onSubmit={this.onSubmitOldPassword}
            />
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          { instructionDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}