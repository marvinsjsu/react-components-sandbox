import React, { Component } from 'react';
import { SlideDown } from 'react-slidedown';
import 'react-slidedown/lib/slidedown.css';

import { Api } from '../../utils/api';
import { styles } from '../../utils/styles';
import { Password } from '../../utils/password';
import NextButton from '../Shared/NextButton';
import Container from '../Shared/Container';
import ErrorMessage from '../Shared/ErrorMessage';
import BottomLinks from '../Shared/BottomLinks';
import PasswordInput from './PasswordInput';
import Finish from './finish';

const UPDATE_STEPS = [
  'password_input',
  'finished',
];

export default class PasswordUpdate extends Component {

  constructor(props) {
    super(props);

    this.state = {
      instructionSet: '',
      currStepIdx: 0,
      password: '',
      passwordConfirmation: '',
      error: false,
      errorMessage: '',
      passwordMismatch: false,
      passwordValid: false,
    };

    this.onClickSignIn = this.onClickSignIn.bind(this);
    this.onSubmitNewPassword = this.onSubmitNewPassword.bind(this);
    this.updatePassword = this.updatePassword.bind(this);
    this.updatePasswordConfirmation = this.updatePasswordConfirmation.bind(this);
    this.checkPasswords = this.checkPasswords.bind(this);
    this._passwordMatches = this._passwordMatches.bind(this);
  }

  componentDidMount() {
    this.setState({
      instructionSet: 'password_input',
      currStepIdx: 0,
      password: '',
      passwordConfirmation: '',
      error: false,
      errorMessage: '',
    });
  }

  onClickSignIn() {
    const { signInCB, displayComponent } = this.props;

    if (signInCB && typeof signInCB === 'function') {
      signInCB();
    }

    displayComponent('login');
  }

  updatePassword(e) {

    const requirementsMet = Password.countRequirementsMet(e.target.value);

    this.setState({
      password: e.target.value,
      passwordValid: requirementsMet >= 4,
    });
  }

  updatePasswordConfirmation(e) {
    this.setState({
      passwordConfirmation: e.target.value,
      passwordMismatch: e.target.value !== this.state.password,
    });
  }

  onSubmitNewPassword(e) {
    e.preventDefault();
    const { token, email, successCB, errorCB } = this.props;

    this.setState({
      error: false,
      errorMessage: '',
      loading: true,
    });

    if (!this._passwordMatches(this.state.password, this.state.passwordConfirmation)) {
      this.setState({
        passwordMismatch: passwordMismatch,
      });

      return false;
    }

    if (!this.state.passwordValid) {
      return false;
    }

    const currStepIdx = this.state.currStepIdx;
    const nextStepIdx = currStepIdx + 1;

    if (nextStepIdx < UPDATE_STEPS.length) {
      this.setState({
        instructionSet: UPDATE_STEPS[nextStepIdx],
        currStepIdx: nextStepIdx,
      }, () => console.log(this.state));
    }

// we don't have token or email, don't call api

    if (token && email) {
      const passwordUpdateData = {
        token: token,
        email: email,
        password: this.state.password,
        passwordConfirmation: this.state.passwordConfirmation,
      };

      Api.passwordUpdate(passwordUpdateData)
        .then(response => {
          if (!response) {
            this.setState({
              error: true,
              errorMessage: 'Something went wrong.  Please try again.',
              loading: false,
            });
          }

          if (response && response.data && response.data.success === false) {
            this.setState({
              error: true,
              errorMessage: response.data.message || 'Error in api call.',
              loading: false,
            });

            if (errorCB && typeof errorCB === 'function') {
              errorCB();
            }
          }

          if (response && response.status && response.status === 204) {

            const currStepIdx = this.state.currStepIdx;
            const nextStepIdx = currStepIdx + 1;

            if (nextStepIdx < UPDATE_STEPS.length) {
              this.setState({
                instructionSet: UPDATE_STEPS[nextStepIdx],
                currStepIdx: nextStepIdx,
              }, () => console.log(this.state));
            }

            if (successCB && typeof successCB === 'function') {
              successCB();
            }
          }
        });
    }
  }

  checkPasswords() {
    const passwordMismatch = !this._passwordMatches(this.state.password, this.state.passwordConfirmation);
    this.setState({
      passwordMismatch: passwordMismatch,
    });
  }

  _passwordMatches(password, passwordConfirmation) {
    if (!password) {
      return false;
    }

    return password == passwordConfirmation;
  }

  render () {
    const { password, passwordConfirmation, error, errorMessage, currStepIdx, instructionSet, passwordMismatch, passwordValid } = this.state;
    const { customStyles = {}, displayComponent } = this.props;
    const { containerStyle = {}, errorStyle = {}, formStyle = {}, labelContainerStyle = {}, labelStyle = {}, inputStyle = {}, buttonStyle = {}, linkStyle = {}} = customStyles;

    let contentTitle = 'Change password';
    let instructionDisplay;

    let passwordMismatchStyle = {};
    if (passwordMismatch) {
      passwordMismatchStyle = styles.invalidInput;
    }

    switch (instructionSet) {
      case 'password_input':
        instructionDisplay = (
          <div style={styles.section}>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <PasswordInput
              password={password}
              updatePassword={this.updatePassword}
              updatePasswordConfirmation={this.updatePasswordConfirmation}
              passwordMismatch={passwordMismatch}
              passwordValid={passwordValid}
              checkPasswords={this.checkPasswords}
              passwordMismatchStyle={passwordMismatchStyle}
              onSubmit={this.onSubmitNewPassword}
            />
          </div>
        );
      break;
      case 'finished':
        instructionDisplay = (
          <div style={styles.section}>
            <Finish />
            <NextButton
              nextLabel={'Sign in'}
              onClickNext={this.onClickSignIn}
            />
          </div>
        );
      break;
      default:
        instructionDisplay = (
          <div style={styles.section}>
            <ErrorMessage
              error={error}
              errorMessage={errorMessage}
            />
            <PasswordInput
              password={password}
              updatePassword={this.updatePassword}
              updatePasswordConfirmation={this.updatePasswordConfirmation}
              onClickNext={this.onClickNext}
              passwordMismatch={passwordMismatch}
              onSubmit={this.onSubmitNewPassword}
            />
          </div>
        );
      break;
    }

    return (
      <div>
        <Container
          contentTitle={contentTitle}
        >
          { instructionDisplay }
        </Container>
        <BottomLinks />
      </div>
    );
  }
}