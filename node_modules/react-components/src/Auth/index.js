import React, { Component } from 'react';

import Login from '../Login';
import Register from '../Register';
import AuthCode from '../AuthCode';
import PasswordReset from '../PasswordReset';
import PasswordUpdate from '../PasswordUpdate';
import AuthenticatorSetup from '../AuthenticatorSetup';
import AuthenticatorDisable from '../AuthenticatorDisable';
import Logout from '../Logout';
import { styles } from '../../utils/styles';

export default class Auth extends Component {

  constructor(props) {
    super(props);

    this.state = {
      display: 'login',
      initialDisplayComponent: 'login',
      showInitialDisplay: true,
      login2FAUser: null,
    };

    this.displayComponent = this.displayComponent.bind(this);
    this.signInCB = this.signInCB.bind(this);
    this.authenticatorSetupCB = this.authenticatorSetupCB.bind(this);
    this.forgotPasswordCB = this.forgotPasswordCB.bind(this);
    this.onClickCancel = this.onClickCancel.bind(this);
    this.onClickDone = this.onClickDone.bind(this);
  }

  componentDidMount() {
    const { initialDisplayComponent } = this.props;

    this.setState({
      initialDisplayComponent: initialDisplayComponent,
      showInitialDisplay: true,
      login2FAUser: null,
    });
  }

  displayComponent(componentName, login2FAUser = null) {
    this.setState({
      display: componentName,
      showInitialDisplay: false,
      login2FAUser
    });
  }

  signInCB() {
    this.displayComponent('sign_in');
  }

  authenticatorSetupCB() {
    this.displayComponent('authenticator_setup');
  }

  forgotPasswordCB() {
    this.displayComponent('password_reset');
  }

  onClickCancel(toDisplay) {
    this.displayComponent(toDisplay);
  }

  onClickDone(toDisplay) {
    this.displayComponent(toDisplay);
  }

  render () {

    const { display, initialDisplayComponent, showInitialDisplay, login2FAUser } = this.state;
    const {
      onClickCancel = null,
      onClickSkip = null,
      onClickDone = null,
      successCB = {},
      errorCB = {},
      siteKey = null,
      qrCodeStr = null,
      token = null,
      passwordResetRedirect = null,
      initialStep,
      destinationPath
    } = this.props;

    let componentToDisplay;
    let displayComponentValue;

    if (initialDisplayComponent && showInitialDisplay) {
      displayComponentValue = initialDisplayComponent;
    } else {
      displayComponentValue = display;
    }

    switch (displayComponentValue) {
      case 'sign_in':
        componentToDisplay = (
          <Login
            displayComponent={this.displayComponent}
            qrCodeStr={qrCodeStr}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            destinationPath={destinationPath}
            onClickCancel={onClickCancel}
          />
        );
      break;
      case 'sign_up':
        componentToDisplay = (
          <Register
            displayComponent={this.displayComponent}
            successCB={this.authenticatorSetupCB}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            siteKey={siteKey}
            destinationPath={destinationPath}
            onClickCancel={onClickCancel}
          />
        );
      break;
      case 'verification_code':
        componentToDisplay = (
          <AuthCode
            displayComponent={this.displayComponent}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            destinationPath={destinationPath}
            onClickCancel={onClickCancel}
            login2FAUser={login2FAUser}
          />
        );
      break;
      case 'password_reset':
        componentToDisplay = (
          <PasswordReset
            displayComponent={this.displayComponent}
            redirect={passwordResetRedirect}
            signInCB={this.signInCB}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            destinationPath={destinationPath}
            onClickCancel={onClickCancel}
          />
        );
      break;
      case 'password_update':
        componentToDisplay = (
          <PasswordUpdate
            displayComponent={this.displayComponent}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            initialStep={initialStep}
            destinationPath={destinationPath}
            onClickCancel={onClickCancel}

          />
        );
      break;
      case 'authenticator_setup':
        componentToDisplay = (
          <AuthenticatorSetup
            displayComponent={this.displayComponent}
            qrCodeStr={qrCodeStr}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            onClickCancel={onClickCancel}
            destinationPath={destinationPath}
          />
        );
      break;
      case 'authenticator_disable':
        componentToDisplay = (
          <AuthenticatorDisable
            displayComponent={this.displayComponent}
            forgotPasswordCB={this.forgotPasswordCB}
            onClickCancel={onClickCancel}
            onClickDone={onClickDone}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            destinationPath={destinationPath}
          />
        );
      break;
      case 'logout':
        componentToDisplay = (
          <Logout
            successCB={successCB}
            errorCB={errorCB}
          />
        );
      break;
      default:
        componentToDisplay = (
          <Login
            displayComponent={this.displayComponent}
            qrCodeStr={qrCodeStr}
            successCB={successCB}
            errorCB={errorCB}
            token={token}
            destinationPath={destinationPath}
            onClickCancel={onClickCancel}
          />
        );
      break;
    }

    return (
      <div style={styles.componentContainer}>
        { componentToDisplay }
      </div>
    );
  }
}